python <<EOF

import os
import sys
from bs4 import BeautifulSoup
# import vim
from tempfile import mkstemp
from gdata.blogger.client import BloggerClient

############# PostBlogger class and instance ################

class PostBlogger(object):
    def __init__(self, rcfile=None):
        if rcfile is None:
            homedir = os.getenv("HOME")
            self.rcfile = os.path.join(homedir, ".vimbloggerrc")
        else:
            self.rcfile = rcfile

        try:
            if not os.path.exists(self.rcfile):
                raise Exception(self.rcfile + " does not exist!")
            with open(self.rcfile) as rcfh:
                rcinfo = rcfh.read()
                self.gaccount, self.gpass, self.blogid = rcinfo.strip().split()

        except Exception as e:
            sys.stderr.write(e.message + "\n")

        self.client = BloggerClient()
        self.client.client_login(email=self.gaccount, password=self.gpass, source='blogger.vim')
        self.posts_cache = {}

    def newpost(self):
        fd, temppath = mkstemp()
        temppath = os.path.realpath(temppath)
        print("Created file " + temppath)
        # register new post in cache
        self.posts_cache[temppath] = {"fd": fd, "postobj": None}
        return temppath

    def __del__(self):
        # close files after things are finished!
        for key in self.posts_cache:
            os.close(self.posts_cache[key]["fd"])
            os.remove(key)
            print("Closed fd for file: " + key)
            print("Deleted file: " + key)



blogger = PostBlogger()
############# PostBlogger class and instance ################

############# Templates ####################
posttemplate = """
<!-- ##################################
        Title of your cool blog post
     ################################## -->
<posttitle>
Sample title
</posttitle>

<!-- ##################################
        Content of your cool blog post
     ################################## -->
<content>
<p>
Sample paragraph
</p>
</content>

<!-- ##################################
        Labels, comma separated
     ################################## -->
<labels>

</labels>
"""
############# Templates ####################

EOF

function! Bnew()
python <<EOF
temppath = blogger.newpost()
print(temppath)
vim.command("e {}".format(temppath))
cb = vim.current.buffer
cb[:] = posttemplate.split("\n")
EOF
endfunction


function! Bpost()
python << EOF

currentpath = vim.eval("expand('%:p')")
# post file must be registered in the cache!
if not currentpath in blogger.posts_cache:
    raise Exception("This file is not generated by Bnew(), abort.")

# read and parse current buffer
cb = vim.current.buffer[:]
cbstring = "\n".join(cb)
soup = BeautifulSoup(cbstring)
posttitle = soup.posttitle.decode_contents()
postcontent = soup.content.decode_contents()
postlabels = soup.labels.decode_contents()
posttitle = posttitle.strip()
postcontent = postcontent.strip()
postlabels = postlabels.strip()

if len(posttitle) == 0 or len(postcontent) == 0 or len(postlabels) == 0:
    raise Exception("Make sure title, content and labels are non-empty!")

postlabels = postlabels.split(",")
postlabels = [x.strip() for x in postlabels]

if blogger.posts_cache[currentpath]["postobj"] is None:
    pobj = blogger.client.add_post(blog_id=blogger.blogid,
        title=posttitle, body=postcontent, labels=postlabels)
    blogger.posts_cache[currentpath]["postobj"] = pobj
    print("Post published and stored in cache.")
    print("{} posts in cache.".format(len(blogger.posts_cache)))
else:
    pobj = blogger.posts_cache[currentpath]["postobj"]
    print("pobj is the same as postobj?: ", str(pobj is blogger.posts_cache[currentpath]["postobj"]))
    if pobj.title.text != posttitle or pobj.content.text != postcontent:
        print("Post modified, I am going to updated it.")
        pobj.title.text = posttitle
        pobj.content.text = postcontent
        for label in postlabels:
            pobj.add_label(label)
        blogger.client.update(pobj)
        print("Post updated.")
    else:
        print("Nothing changed, don't bother me.")
EOF
endfunction


command! -nargs=0  Bnew  call Bnew()
command! -nargs=0  Bpost call Bpost()
